from tkinter import *
from tkinter import ttk, messagebox
from clsChess import Chess

global selected_tuple


# логика
# заполняем поля ввода значениями выделенной позиции в общем списке
def get_selected_row(event):


# будем обращаться к глобальной переменной
global selected_tuple
# получаем позицию выделенной записи в списке
index = list1.curselection()[0]  # this is the id of the selected tuple
# получаем значение выделенной записи
selected_tuple = list1.get(index)
# удаляем то, что было раньше в поле ввода
lastname_ss_entry.delete(0, END)
# и добавляем туда текущее значение названия покупки
lastname_ss_entry.insert(END, selected_tuple[1])
# делаем то же самое с другими полями
Date_of_Birth_entry.delete(0, END)
Date_of_Birth_entry.insert(END, selected_tuple[2])
country_entry.delete(0, END)
country_entry.insert(END, selected_tuple[3])
sports_category_entry.delete(0, END)
sports_category_entry.insert(END, selected_tuple[4])
Name_entry.delete(0, END)
Name_entry.insert(END, selected_tuple[5])
the_date_of_the_entry.delete(0, END)
the_date_of_the_entry.insert(END, selected_tuple[6])
busy_place_entry.delete(0, END)
busy_place_entry.insert(END, selected_tuple[7])


# обработчик нажатия на кнопку «Посмотреть всё»
def view_command():


# очищаем список в приложении
list1.delete(0, END)
# проходим все записи в БД
for row in database_Chess.view():
# и сразу добавляем их на экран
list1.insert(END, row)


# обработчик нажатия на кнопку «Поиск»
def search_command():


# очищаем список в приложении
list1.delete(0, END)
# находим все записи по названию покупки
for row in database_Chess.search(lastname_ss_text.get()):
# и добавляем их в список в приложение
list1.insert(END, row)


# обработчик нажатия на кнопку «Добавить»
def add_command():


# добавляем запись в БД
database_Chess.insert(lastname_ss_text.get(),
                         Date_of_Birth_text.get(),
                         country_text.get(),
                         sports_category_text.get(),
                         Name_text.get(),
                         the_date_of_the_text.get(),
                         busy_place_text.get())
# обновляем общий список в приложении
view_command()


# обработчик нажатия на кнопку «Удалить»
def delete_command():


# удаляем запись из базы данных по индексу выделенного элемента
database_Chess.delete(selected_tuple[0])
# обновляем общий список расходов в приложении
view_command()


# обработчик нажатия на кнопку «Обновить»
def update_command():


# обновляем данные в БД о выделенной записи
database_Chess.update(selected_tuple[0],
                         lastname_ss_text.get(),
                         Date_of_Birth_text.get(),
                         country_text.get(),
                         sports_category_text.get(),
                         Name_text.get(),
                         the_date_of_the_text.get(),
                         busy_place_text.get())
# обновляем общий список расходов в приложении
view_command()
# интерфейс
window = Tk()
window.title("Демонстрация действий с БД")


# обрабатываем закрытие окна
def on_closing():


# показываем диалоговое окно с кнопкой
if messagebox.askokcancel("", "Закрыть программу?"):
# удаляем окно и освобождаем память
window.destroy()
# сообщаем системе о том, что делать, когда окно закрывается
window.protocol("WM_DELETE_WINDOW", on_closing)
# создаём блоки для полей ввода и подписей к ним и размещаем их по сетке
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
# создаём надписи для полей ввода и размещаем их по сетке
l1 = Label(frame, text="Фамилия спортсмена")
l1.pack()
lastname_s_text = StringVar()
lastname_s_entry = ttk.Entry(frame, textvariable=lastname_s_text)
lastname_s_entry.pack()
frame.grid(row=0, column=0)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
l2 = Label(frame, text="Дата рождения")
l2.pack()
Date_of_Birth_text = StringVar()
Date_of_Birth_entry = ttk.Entry(frame, textvariable=Date_of_Birth_text)
Date_of_Birth_entry.pack()
frame.grid(row=0, column=1)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
l3 = Label(frame, text="Страна")
l3.pack()
scholarship_text = StringVar()
scholarship_entry = ttk.Entry(frame, textvariable=country_text)
scholarship_entry.pack()
frame.grid(row=0, column=2)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
l4 = Label(frame, text="спортивный разряд")
l4.pack()
sports_category_text = StringVar()
sports_category_entry = ttk.Entry(frame, textvariable=sports_category_text)
sports_category_entry.pack()
frame.grid(row=0, column=3)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
l5 = Label(frame, text="Имя")
l5.pack()
Name_text = StringVar()
Name_entry = ttk.Entry(frame, textvariable=Name_text)
Name_entry.pack()
frame.grid(row=1, column=0)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
# создаём список, где появятся данные, и сразу определяем его размеры в окне
list1 = Listbox(frame, height=25, width=65)
list1.pack(side=LEFT, fill=BOTH, expand=1)
l6 = Label(frame, text="дата проведения")
l6.pack()
the_date_of_the_text = StringVar()
the_date_of_the_entry = ttk.Entry(frame, textvariable=the_date_of_the_text)
the_date_of_the_entry.pack()
frame.grid(row=1, column=1)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
l7 = Label(frame, text="занятое место")
l7.pack()
busy_place_text = StringVar()
busy_place_entry = ttk.Entry(frame, textvariable=busy_place_text)
busy_place_entry.pack()
frame.grid(row=1, column=2)
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
# создаём список, где появятся данные, и сразу определяем его размеры в окне
list1 = Listbox(frame, height=25, width=65)
list1.pack(side=LEFT, fill=BOTH, expand=1)
# на всякий случай добавим сбоку скролл, чтобы можно было быстро прокручивать
длинные
списки
sb1 = Scrollbar(frame)
sb1.pack(side=RIGHT, fill=Y)
# привязываем скролл к списку
list1.configure(yscrollcommand=sb1.set)
sb1.configure(command=list1.yview)
frame.grid(row=1, column=0, columnspan=2)
list1.bind('<<ListboxSelect>>', get_selected_row)
# создаём кнопки действий и привязываем их к своим функциям
# кнопки размещаем тоже по сетке
frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=4)
b1 = Button(frame, text="Посмотреть все", width=12, command=view_command)
b1.pack()  # size of the button
b2 = Button(frame, text="Поиск", width=12, command=search_command)
b2.pack()
b3 = Button(frame, text="Добавить", width=12, command=add_command)
b3.pack()
b4 = Button(frame, text="Обновить", width=12, command=update_command)
b4.pack()
b5 = Button(frame, text="Удалить", width=12, command=delete_command)
b5.pack()
b6 = Button(frame, text="Закрыть", width=12, command=on_closing)
b6.pack()
frame.grid(row=1, column=4)
database_Chess = Sportman()
window.mainloop()
